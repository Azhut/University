import functools



# Модифицируйте код декоратора reverse_string
def reverse_string(func):
    """Если результат функции - строка, то ее нужно перевернуть. Иначе вернуть None."""

    @functools.wraps(func)
    def wrapper(*args, **kwargs):
        result = func(*args, **kwargs)
        if isinstance(result, str):
            return result[::-1]
        else:
            return None
    return wrapper

@reverse_string
def get_university_name():
    return "Western Institute of Technology and Higher Education"


@reverse_string
def get_university_founding_year():
    return 1957

if __name__ == '__main__':
    print(
        get_university_name(),
        get_university_founding_year(),
        sep="\n"
    )
--------------------------------------------------------------
2 task


import functools
import random

from typing import List

# Модифицируйте код декоратора prime_filter
def is_prime(a):
    if a % 2 == 0:
        return a == 2
    d = 3
    while d * d <= a and a % d != 0:
        d += 2
    return d * d > a
def prime_filter(func):
    """Дан список целых чисел, возвращайте только простые целые числа"""
    @functools.wraps(func)
    def wrapper(*args, **kwargs):
        all_nums = func(*args, **kwargs)
        prime_nums = [num for num in all_nums if is_prime(num)]
        return prime_nums
    return wrapper

@prime_filter
def numbers(from_num, to_num):
    return [num for num in range(from_num, to_num)]

if __name__ == '__main__':
    print(numbers(from_num=2, to_num=20))

--------------------------------------------------------------------
3 task

def simple_decorator(decorator):
    def wrapper(func):
        def wrapped(*args, **kwargs):
            return func(*args, **kwargs)

        wrapped.__name__ = func.__name__
        wrapped.__doc__ = func.__doc__
        return wrapped
    return wrapper


@simple_decorator
def my_simple_logging_decorator(func):
    def you_will_never_see_this_name(*args, **kwargs):
        print('calling {}'.format(func.__name__))
        return func(*args, **kwargs)

    return you_will_never_see_this_name


@my_simple_logging_decorator
def double(x):
    'Doubles a number.'
    return 2 * x


assert double.__name__ == 'double'
assert double.__doc__ == 'Doubles a number.'

if __name__ == '__main__':
    print(double(155))

---------------------------------------------
4 task

import time
from functools import wraps
import random


def retry(max_attempts=3, initial_delay=1, backoff_factor=2):
    def decorator(func):
        def wrapper(*args, **kwargs):
            attempts = 0
            delay = initial_delay

            while attempts < max_attempts:
                try:
                    result = func(*args, **kwargs)
                    return result
                except Exception as e:
                    attempts += 1
                    if attempts == max_attempts:
                        raise e
                    else:
                        print(f"Retry failed attempt {attempts}: {e}")
                        time.sleep(delay)
                        delay *= backoff_factor

        return wrapper

    return decorator


@retry(max_attempts=3, initial_delay=1, backoff_factor=2)
def perform_task():
    random_value = random.randint(0, 5)
    if random_value < 3:
        print("Task successful")
        return True
    else:
        raise Exception("Task failed")


try:
    result = perform_task()
    print("Task executed successfully")
except Exception as e:
    print(f"Task failed after maximum attempts: {e}")
